service: udagram-serverless-go

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

frameworkVersion: '2'

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  tracing:
    apiGateway: true
    lambda: true
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - xray:GetSamplingRules
            - xray:GetSamplingTargets
            - xray:GetSamplingStatisticSummaries
            - xray:BatchGetTraces
            - xray:GetServiceGraph
            - xray:GetTraceGraph
            - xray:GetTraceSummaries
            - xray:GetGroups
            - xray:GetGroup
            - xray:PutTraceSegments
          Resource:
            - '*'

  environment:
    UDAGRAM_TABLE: Udagram-${self:provider.stage}
    PHOTOS_IDX: PhotosIdx
    JWT_SECRET_ID: JWTSecret-${self:provider.stage}
    JWT_SECRET_FIELD: jwtSecret
    S3_BUCKET: udagram-rondondev-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300



package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  Auth:
    handler: bin/auth/auth
    tracing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref JWTSecret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

  CreateUser:
    handler: bin/users/createUser
    tracing: true
    events:
      - http:
          path: /users/auth
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(requests/create-user-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.UDAGRAM_TABLE}
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref JWTSecret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

  Login:
    handler: bin/users/login
    tracing: true
    events:
      - http:
          path: /users/auth/login
          method: post
          cors: true
          request:
            schemas:
              application/json: ${file(requests/login-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.UDAGRAM_TABLE}
      - Effect: Allow
        Action:
          - secretsmanager:GetSecretValue
        Resource: !Ref JWTSecret
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: !GetAtt KMSKey.Arn

  CreateFeed:
    handler: bin/feed/createFeed
    tracing: true
    events:
      - http:
          path: /feed
          method: post
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(requests/create-feed-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.UDAGRAM_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*

  GetFeed:
    handler: bin/feed/getFeed
    tracing: true
    events:
      - http:
          path: /feed
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.UDAGRAM_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.UDAGRAM_TABLE}/index/${self:provider.environment.PHOTOS_IDX}

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: type
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.UDAGRAM_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.PHOTOS_IDX}
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    FileUploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref FileUploadBucket

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt JWT secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - ':'
                    - - 'arn:aws:iam:'
                      - Ref: AWS::AccountId
                      - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/jwtKey-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    JWTSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.JWT_SECRET_ID}
        Description: JWT Secret
        KmsKeyId: !Ref KMSKey